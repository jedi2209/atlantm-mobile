fastlane_version '2.108.0'

before_all do
  ensure_git_branch(
    branch: 'update-push'
  )
  # git_pull
end

platform :ios do
  desc "Prepare the iOS app for dev or build"
  lane :prepare do
    ensure_git_status_clean
    produce(
        app_identifier: "com.atlant-m.OneSignalNotificationServiceExtension",
        app_name: "atlant-m OneSignalNotificationServiceExtension",
        skip_itc: true
    )
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    get_certificates           # invokes cert
    get_provisioning_profile   # invokes sigh
    increment_build_number(
        xcodeproj: "ios/atlantm.xcodeproj"
    )
    build_app(
	workspace: "ios/atlantm.xcworkspace",
	scheme: "atlantm",
	export_method: "app-store",
	export_options: {
     		provisioningProfiles: {
        		"com.atlant-m" => "com.atlant-m AppStore",
        		"com.atlant-m.OneSignalNotificationServiceExtension" => "XC com atlant-m OneSignalNotificationService"
      		}
    	}
    )
    # Generate the changelog based on commit messages since your last tag
    changelog_from_git_commits(
        pretty: "- (%ae) %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
        date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
        match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
        merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )
    upload_to_testflight(
        skip_waiting_for_build_processing: true,
        skip_submission: true
    )
    commit_version_bump(
        message: "Version Bump iOS",    # create a commit with a custom message
        xcodeproj: "ios/atlantm.xcodeproj"
    )
    add_git_tag(
        grouping: "builds",
        prefix: "v"
    )
#    push_to_git_remote
  end
end

platform :android do
  desc "Runs all the tests"
  lane :test do
    changelog_from_git_commits(
        pretty: "- (%ae) %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
        date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
        match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
        merge_commit_filtering: "exclude_merges", # Optional, lets you filter out merge commits
        tag_match_pattern: "builds/android"
    )
    gradle(
        project_dir: "./android/",
        task: "clean assemble",
        build_type: "Release",
        flags: "-PbuildType=release",
        print_command_output: true
    )
  end

  desc "Submit a new Internal Build to Google Play"
  lane :internal do
    ensure_git_status_clean
    gradle(
        project_dir: "./android/",
        task: "clean assemble",
        build_type: "Release",
        flags: "-PbuildType=release",
        print_command_output: true
    )
    # Generate the changelog based on commit messages since your last tag
    changelog_from_git_commits(
        pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
        date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
        match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
        merge_commit_filtering: "exclude_merges", # Optional, lets you filter out merge commits
        tag_match_pattern: "builds/android"
    )
    upload_to_play_store(
        track: 'internal'
    )
    git_commit(
        path: ['./android/app/versioning/app_version.properties'],
        message: 'Version Bump Android'
    )
    add_git_tag(
        grouping: "builds",
        prefix: "v"
    )
#    push_to_git_remote
  end
end