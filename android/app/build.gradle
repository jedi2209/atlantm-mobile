buildscript {
    repositories {
        maven { url 'https://plugins.gradle.org/m2/' } // Gradle Plugin Portal 
    }
    dependencies {
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:[0.12.1, 0.99.99]'
    }
}

apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    root: "../../",
    entryFile: "index.js",
    bundleInRelease       : true,
    resourcesDirRelease   : "./src/release/res",
    enableHermes: false,  // clean and rebuild if changing
]

project.ext.version = [
    code:   versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100,
    incr:   versionBuild + 1,
    name:   "${versionMajor}.${versionMinor}.${versionPatch}",
    build:  0
]

project.ext.version.build = project.ext.version.code + project.ext.version.incr

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = true

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false
// def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc-intl:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    // buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.atlantm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.ext.version.build
        versionName project.ext.version.name
        multiDexEnabled true
        ndk.abiFilters 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
        packagingOptions {
            exclude "lib/armeabi-v7a/libmonochrome.so"
        }
        // vectorDrawables.useSupportLibrary = true
    }
    splits {
        abi {
            println ("split settings for release.")
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk true  // If true, also generate a universal APK
            include 'armeabi-v7a', 'x86', 'arm64-v8a', 'x86_64'
        }
    }
    signingConfigs {
        release {
            storeFile file(ATLANTM_RELEASE_STORE_FILE)
            storePassword ATLANTM_RELEASE_STORE_PASSWORD
            keyAlias ATLANTM_RELEASE_KEY_ALIAS
            keyPassword ATLANTM_RELEASE_KEY_PASSWORD
        }
    }
    dexOptions {
        javaMaxHeapSize "3g"
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (project.hasProperty('buildType')) {
                if (buildType != "debug") {
                    saveChanges(project.ext.version.incr)
                }
	        }
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["x86": 1, "x86_64": 2, "armeabi-v7a": 3, "arm64-v8a": 4]
            def abi = output.getFilter(OutputFile.ABI)
            def baseAbiVersionCode = versionCodes.get(output.getFilter(OutputFile.ABI))
            if (abi != null) {
                output.versionCodeOverride = baseAbiVersionCode * 10000 + variant.versionCode
            }
        }
    }
    // configurations.all {
    //     resolutionStrategy.force 'com.android.support:support-compat:28.0.0'
    // }
}

dependencies {
    implementation project(':@react-native-community_slider')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules

    implementation 'com.android.support:multidex:1.0.3'

    // implementation  project(':react-native-devsettings-android')
    // implementation "com.amplitude:android-sdk:2.19.1"
    // implementation project(':rn-fetch-blob')

    // implementation  project(':react-native-gesture-handler')

    // implementation  project(':@react-native-community_async-storage')
    // implementation  project(':react-native-image-crop-picker')
    // implementation  project(':react-native-onesignal')

    // implementation(project(':react-native-onesignal')){
    //     exclude group: 'com.google.android.gms'
    // }

    implementation(project(':react-native-maps')) {
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    // implementation 'com.google.android.gms:play-services-base:12.0.1'
    // implementation 'com.google.android.gms:play-services-maps:12.0.1'

    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    // implementation "com.android.support:support-compat:${rootProject.ext.supportLibVersion}"
    // implementation "com.android.support:support-v4:${rootProject.ext.supportLibVersion}"

    implementation "com.google.android.gms:play-services-base:${rootProject.ext.playServicesVersion}"
    implementation "com.google.android.gms:play-services-maps:${rootProject.ext.playServicesVersion}"

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// apply from: "../../node_modules/react-native/react.gradle"
// apply from: "../../node_modules/@sentry/react-native/sentry.gradle"
// apply plugin: 'com.google.gms.google-services'

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)