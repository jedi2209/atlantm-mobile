apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

apply plugin: "com.android.application"

project.ext.react = [
    root: "../../",
    entryFile: "index.js",
    bundleInRelease       : true,
    resourcesDirRelease   : "src/release/res"
]

project.ext.version = [
    code:   versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100,
    incr:   versionBuild + 1,
    name:   "${versionMajor}.${versionMinor}.${versionPatch}",
    build:  0
]

project.ext.version.build = project.ext.version.code + project.ext.version.incr

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.atlantm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.ext.version.build
        versionName project.ext.version.name
//        ndk {
//            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
//        }
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storeFile file(ATLANTM_RELEASE_STORE_FILE)
            storePassword ATLANTM_RELEASE_STORE_PASSWORD
            keyAlias ATLANTM_RELEASE_KEY_ALIAS
            keyPassword ATLANTM_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            println ("split settings for release.")
//            enable enableSeparateBuildPerCPUArchitecture
            enable true
            reset()
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
            universalApk true
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
//            minifyEnabled enableProguardInReleaseBuilds
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (project.hasProperty('buildType')) {
                if (buildType != "debug") {
                    saveChanges(project.ext.version.incr)
                }
	        }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-compat:28.0.0'
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = [x86:1, x86_64:2, "armeabi-v7a":3, "arm64-v8a":4]

import com.android.build.OutputFile

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 1000 + variant.versionCode. In this example, variant.versionCode
// is equal to defaultConfig.versionCode. If you configure product flavors that
// define their own versionCode, variant.versionCode uses that value instead.

// applicationVariants are e.g. debug, release
android.applicationVariants.all { variant ->

  // Assigns a different version code for each output APK
  // other than the universal APK.
  variant.outputs.each { output ->

    // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
    def baseAbiVersionCode =
            // Determines the ABI for this variant and returns the mapped value.
            project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))

    // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
    // the following code does not override the version code for universal APKs.
    // However, because we want universal APKs to have the lowest version code,
    // this outcome is desirable.
    if (baseAbiVersionCode != null) {

      // Assigns the new version code to versionCodeOverride, which changes the version code
      // for only the output APK, not for the variant itself. Skipping this step simply
      // causes Gradle to use the value of variant.versionCode for the APK.
      output.versionCodeOverride = baseAbiVersionCode * 10000 + variant.versionCode
      // output.versionCodeOverride = baseAbiVersionCode * 1000 + variant.versionCode
    }
  }
}

dependencies {
    implementation project(':react-native-gesture-handler')
    implementation  project(':react-native-devsettings-android')
    implementation  project(':@react-native-community_async-storage')
    implementation project(':@sentry_react-native')
    implementation  project(':react-native-image-crop-picker')
    implementation  project(':react-native-onesignal')

    implementation "com.amplitude:android-sdk:2.19.1"
    implementation project(':react-native-amplitude-analytics')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-device-info')

    implementation(project(':react-native-maps')) {
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    implementation 'com.google.android.gms:play-services-base:10.0.1'
    implementation 'com.google.android.gms:play-services-maps:10.0.1'

    implementation project(':react-native-splash-screen')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}'
    implementation 'com.android.support:support-compat:${rootProject.ext.supportLibVersion}'
    implementation 'com.android.support:support-v4:${rootProject.ext.supportLibVersion}'
    implementation 'com.facebook.react:react-native:+'  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'