apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'

apply plugin: "com.android.application"

import com.android.build.OutputFile

project.ext.react = [
    root: "../../",
    entryFile: "index.js",
    bundleInRelease       : true,
    resourcesDirRelease   : "src/release/res"
]

project.ext.version = [
    code:   versionMajor * 100000 + versionMinor * 1000 + versionPatch * 100,
    incr:   versionBuild + 1,
    name:   "${versionMajor}.${versionMinor}.${versionPatch}",
    build:  0
]

project.ext.version.build = project.ext.version.code + project.ext.version.incr

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-sentry/sentry.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.atlantm"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode project.ext.version.build
        versionName project.ext.version.name
        ndk {
            abiFilters "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storeFile file(ATLANTM_RELEASE_STORE_FILE)
            storePassword ATLANTM_RELEASE_STORE_PASSWORD
            keyAlias ATLANTM_RELEASE_KEY_ALIAS
            keyPassword ATLANTM_RELEASE_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (project.hasProperty('buildType')) {
                if (buildType != "debug") {
                    saveChanges(project.ext.version.incr)
                }
	        }
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a":3, "x86_64":4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride = versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-compat:${rootProject.ext.googlePlayServicesVersion}'
    }
}

dependencies {
    implementation  project(':react-native-devsettings-android')
    implementation  project(':@react-native-community_async-storage')
    implementation  project(':react-native-sentry')
    implementation  project(':react-native-image-crop-picker')
    implementation  project(':react-native-onesignal')

    implementation "com.amplitude:android-sdk:2.19.1"
    implementation project(':react-native-amplitude-analytics')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-device-info')

    implementation(project(':react-native-maps')) {
        exclude group: 'com.google.android.gms', module: 'play-services-base'
        exclude group: 'com.google.android.gms', module: 'play-services-maps'
    }
    implementation 'com.google.android.gms:play-services-base:10.0.1'
    implementation 'com.google.android.gms:play-services-maps:10.0.1'

    implementation project(':react-native-splash-screen')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}'
    implementation 'com.android.support:support-compat:${rootProject.ext.supportLibVersion}'
    implementation 'com.android.support:support-v4:${rootProject.ext.supportLibVersion}'
    implementation 'com.facebook.react:react-native:+'  // From node_modules
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'